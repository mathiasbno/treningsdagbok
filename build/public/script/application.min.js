angular.module("td", ["ui.router", "restangular", "firebase"]);

angular.module("td").constant("FIREBASE_URL", "https://radiant-inferno-2865.firebaseio.com/");

angular.module("td").config(function($locationProvider, $stateProvider, $urlRouterProvider) {
  $locationProvider.html5Mode(true);
  return $stateProvider.state("home", {
    url: "/",
    templateUrl: "templates/home/index.html",
    controller: 'FrontPageCtrl'
  }).state("user", {
    url: "/user",
    templateUrl: "templates/user/show.html"
  }).state("user_new", {
    url: "/user/register",
    templateUrl: "templates/user/register.html",
    controller: 'RegisterUserCtrl'
  }).state("user_update", {
    url: "/user/update",
    templateUrl: "templates/user/update.html",
    controller: 'UpdateUsersCtrl'
  }).state("otherwise", {
    url: '/'
  });
});

angular.module("td").controller("ApplicationCtrl", function($state, $scope, $rootScope, Restangular, simpleLoginFactory, FIREBASE_URL) {
  var authClient, myRef;
  $scope.logout = function() {
    simpleLoginFactory.$logout();
    $rootScope.currentUser = void 0;
    return $state.go('home');
  };
  myRef = new Firebase(FIREBASE_URL);
  return authClient = new FirebaseSimpleLogin(myRef, function(error, user) {
    if (error) {
      return console.log(error);
    } else if (user) {
      Restangular.oneUrl('firebase', FIREBASE_URL + 'users/' + user.uid + '.json').get().then(function(fullUser) {
        return $rootScope.currentUser = fullUser;
      });
      return console.log("User ID: " + user.uid + ", Provider: " + user.provider);
    } else {
      return console.log('Not logged in');
    }
  });
});

angular.module("td").controller("CalendarCtrl", function($rootScope, $scope, $filter, Restangular) {
  $scope.today = new Date;
  $scope.month_names = ["Januar", "februar", "Mars", "April", "Mai", "Juni", "Juli", "August", "Spetember", "Oktober", "November", "Desember"];
  $scope.day_names = ["Søndag", "Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag"];
  Date.prototype.getWeekNumber = function() {
    var onejan, week_number;
    onejan = new Date(this.getFullYear(), 0, 1);
    week_number = Math.ceil((((this - onejan) / 86400000) + onejan.getDay() + 1) / 7);
    if (week_number === 53) {
      return week_number = 1;
    } else {
      return week_number;
    }
  };
  $scope.daysInMonth = function(month, year) {
    return new Date(year, month + 1, 0).getDate();
  };
  $scope.getNextMonth = function(date) {
    return $scope.current_month = $scope.getMonth(date);
  };
  $scope.getPrevMonth = function(date) {
    return $scope.current_month = $scope.getMonth(date);
  };
  $scope.activeWeek = function(date_input) {
    var date, end_date, start_date;
    date = new Date(date_input);
    $scope.current_week = $scope.getWeek(date);
    start_date = new Date(date);
    start_date = start_date.setDate(date.getDate() - (date.getDay() - 1));
    start_date = $filter('date')(start_date, 'yyyy-MM-dd');
    end_date = new Date(date);
    end_date = $filter('date')(end_date.setDate(end_date.getDate() + 5), 'yyyy-MM-dd');
    return Restangular.all("active_range").getList({
      'user_id': $rootScope.current_user.id,
      datestart: start_date,
      dateend: end_date
    }).then(function(sessions) {
      return $scope.sessions = sessions;
    });
  };
  $scope.getWeek = function(date_input) {
    var date, day, first_day, first_day_copy, first_day_in_next_week, first_day_in_week, i, loop_date, start_of_next_week;
    date = new Date(date_input);
    first_day_in_week = date.getDate() - (date.getDay() - 1);
    first_day_copy = new Date(date);
    first_day = new Date(first_day_copy.setDate(first_day_in_week));
    first_day_in_next_week = date.getDate() - (date.getDay() + 8);
    start_of_next_week = new Date(first_day);
    start_of_next_week.setDate(start_of_next_week.getDate() + 7);
    loop_date = first_day;
    $scope.week = {
      'week_number': loop_date.getWeekNumber(),
      'start_of_next_week': start_of_next_week,
      'start_of_week': first_day,
      'days': []
    };
    i = 0;
    while (i < 7) {
      day = {
        'date': loop_date.getDate(),
        'month': loop_date.getMonth() + 1,
        'year': loop_date.getFullYear(),
        'full_date': $filter('date')(loop_date, 'yyyy-MM-dd'),
        'date_name': $scope.day_names[loop_date.getDay()]
      };
      $scope.week.days.push(day);
      loop_date.setDate(loop_date.getDate() + 1);
      i++;
    }
    return $scope.week;
  };
  $scope.getMonth = function(date_input) {
    var date, days_in_month, first_day, last_day, loop_date, month_name, month_number, next_month, prev_month, week;
    date = new Date(date_input);
    month_number = date.getMonth();
    month_name = $scope.month_names[month_number];
    last_day = new Date(date.getFullYear(), month_number + 1, 0);
    first_day = new Date(date.getFullYear(), month_number, 1);
    days_in_month = $scope.daysInMonth(month_number, date.getFullYear());
    next_month = date;
    prev_month = date;
    next_month.setDate(1);
    prev_month.setDate(1);
    $scope.month = {
      'month_name': $scope.month_names[month_number],
      'month_number': month_number,
      'days_in_month': days_in_month,
      'next_month': new Date(next_month.setMonth(date.getMonth() + 1)),
      'prev_month': new Date(prev_month.setMonth(date.getMonth() - 2)),
      'weeks': []
    };
    loop_date = first_day;
    while (loop_date <= last_day) {
      week = $scope.getWeek(loop_date);
      $scope.month.weeks.push(week);
      loop_date = week.start_of_next_week;
    }
    return $scope.month;
  };
  $scope.getYears = function(date_input) {
    var a, date, first_in_month, i, month, year;
    date = new Date(date_input);
    $scope.years = [];
    i = 1;
    while (i <= 3) {
      $scope.months = [];
      year = (date.getFullYear() - 2) + i;
      a = 0;
      while (a <= 11) {
        first_in_month = new Date(year, a, 1);
        month = $scope.getMonth(first_in_month);
        $scope.months.push(month);
        a++;
      }
      $scope.year = {
        'year': year,
        'months': $scope.months
      };
      $scope.years.push($scope.year);
      i++;
    }
    return $scope.years;
  };
  $scope.current_week = $scope.getWeek($scope.today);
  $scope.current_month = $scope.getMonth($scope.today);
  $scope.current_years = $scope.getYears($scope.today);
  return $scope.activeWeek($scope.today);
});

angular.module("td").controller("ClubsCtrl", function($scope, Restangular) {
  return Restangular.all("klubber").getList().then(function(clubs) {
    return $scope.clubs = clubs;
  });
});

angular.module("td").controller("FrontPageCtrl", function($scope) {});

angular.module("td").controller("LoginCtrl", function($scope, $firebase, $rootScope, Restangular, simpleLoginFactory, FIREBASE_URL) {
  var sync, usersRef;
  usersRef = new Firebase(FIREBASE_URL + '/users');
  sync = $firebase(usersRef);
  $scope.loginUser = {
    email: '',
    password: ''
  };
  $scope.loginPassword = function() {
    $scope.errors = [];
    return simpleLoginFactory.$login('password', {
      email: $scope.loginUser.email,
      password: $scope.loginUser.password
    }).then(function(loginUser) {
      return $scope.loginUser = {
        email: '',
        password: ''
      };
    }, function(error) {
      return $scope.errors.push(error);
    });
  };
  return $scope.loginFacebook = function() {
    $scope.errors = [];
    return simpleLoginFactory.$login("facebook", {
      rememberMe: true,
      scope: 'email'
    }).then(function(user) {
      return usersRef.once('value', function(snapshot) {
        var newUser;
        if (!snapshot.hasChild(user.uid)) {
          newUser = {
            uid: user.uid,
            email: user.thirdPartyUserData.email,
            first_name: user.thirdPartyUserData.first_name,
            last_name: user.thirdPartyUserData.last_name,
            full_name: user.thirdPartyUserData.name,
            gender: user.thirdPartyUserData.gender
          };
          return sync.$set("" + user.uid, newUser);
        }
      });
    });
  };
});

angular.module("td").controller("NewUserCtrl", function($state, $rootScope, $scope, Restangular) {
  $scope.user = {};
  return $scope.newUser = function() {
    return Restangular.all('bruker').post($scope.user).then(function(user) {
      if (user.error) {
        return $scope.error = user;
      } else {
        return console.log("Saved " + user.first_name);
      }
    });
  };
});

angular.module("td").controller("RegisterUserCtrl", function($scope, $state, $firebase, $rootScope, simpleLoginFactory, FIREBASE_URL) {
  var sync, usersRef;
  usersRef = new Firebase(FIREBASE_URL + '/users');
  sync = $firebase(usersRef);
  $scope.registerUser = {
    email: '',
    password: '',
    first_name: '',
    last_name: ''
  };
  return $scope.register = function() {
    $scope.errors = [];
    $scope.user = $scope.registerUser;
    return simpleLoginFactory.$createUser($scope.user.email, $scope.user.password).then(function(user) {
      var newUser;
      newUser = {
        uid: user.uid,
        email: user.email,
        first_name: $scope.user.first_name,
        last_name: $scope.user.last_name,
        name: "" + $scope.user.first_name + " " + $scope.user.last_name
      };
      return sync.$set("" + user.uid, newUser).then(function() {
        return simpleLoginFactory.$login('password', {
          email: $scope.user.email,
          password: $scope.user.password
        }).then(function(user) {
          $scope.registerUser = {
            email: '',
            password: ''
          };
          return $state.go('user_update');
        });
      });
    }, function(error) {
      var stripedError;
      stripedError = {
        code: error.code,
        message: error.message
      };
      return $scope.errors.push(stripedError);
    });
  };
});

angular.module("td").controller("SessionsCtrl", function($state, $rootScope, $scope, $filter, Restangular) {
  $scope.newSession = function(session, date) {
    var session_params;
    session_params = {
      user_id: $rootScope.current_user.id,
      comment: session.comment,
      date: $filter('date')(date, 'yyyy-MM-dd')
    };
    return Restangular.all('trening').post(session_params).then(function(session) {
      return $scope.sessions.push(session);
    });
  };
  return $scope.destroySession = function(session) {
    var index;
    Restangular.one('trening', session.id).remove();
    index = $scope.sessions.indexOf(session);
    return $scope.sessions.splice(index, session.id);
  };
});

angular.module("td").controller("UpdateUsersCtrl", function($rootScope, $scope, $firebase, sportFactory, FIREBASE_URL) {
  var userSync, usersRef;
  usersRef = new Firebase(FIREBASE_URL + '/users');
  userSync = $firebase(usersRef);
  sportFactory.all().then(function(sports) {
    debugger;
    return $scope.sports = sports;
  });
  $scope.addSport = function() {
    var sportObj;
    $scope.errors = [];
    if ($rootScope.currentUser.sports === void 0) {
      $rootScope.currentUser.sports = [];
    }
    sportObj = {
      "name": $scope.newSportInput.sport
    };
    return sportFactory.post(sportObj).then(function(sport) {
      return $rootScope.currentUser.sports.push(sport);
    });
  };
  return $scope.updateUser = function() {
    debugger;
    var updatedUser;
    updatedUser = {
      email: $rootScope.currentUser.email,
      first_name: $rootScope.currentUser.first_name,
      last_name: $rootScope.currentUser.last_name,
      full_name: "" + $rootScope.currentUser.first_name + " " + $rootScope.currentUser.last_name
    };
    return userSync.$update("" + $rootScope.currentUser.uid, updatedUser);
  };
});

angular.module("td").factory("simpleLoginFactory", function($firebaseSimpleLogin, FIREBASE_URL) {
  var firebaseRef;
  firebaseRef = new Firebase(FIREBASE_URL);
  return $firebaseSimpleLogin(firebaseRef);
});

angular.module("td").factory('sportFactory', function($q, $firebase, FIREBASE_URL) {
  var deferred, firebaseRef, sync, syncArray;
  firebaseRef = new Firebase(FIREBASE_URL + 'sports');
  sync = $firebase(firebaseRef);
  syncArray = $firebase(firebaseRef).$asArray();
  deferred = $q.defer();
  return {
    all: function() {
      firebaseRef.once('value', function(snap) {
        return deferred.resolve(snap.val());
      });
      return deferred.promise;
    },
    post: function(object) {
      syncArray.$add(object).then(function(ref) {
        return deferred.resolve(ref.name());
      }, function(error) {
        return deferred.resolve(error);
      });
      return deferred.promise;
    }
  };
});
